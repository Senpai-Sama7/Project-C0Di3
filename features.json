[
  {
    "id": "F1",
    "feature": "Admin authentication uses configured password",
    "command": "TS_NODE_PREFER_TS_EXTS=1 ADMIN_PASSWORD=TestAdmin123! JWT_SECRET=RealitySecret123 npx ts-node --transpile-only fixes/auth-service-reality-check.ts",
    "expected": "auth-admin-login.outcome.success === true",
    "evidence": "evidence/auth-check.json",
    "status": "VERIFIED"
  },
  {
    "id": "F2",
    "feature": "Invalid password attempts are rejected",
    "command": "TS_NODE_PREFER_TS_EXTS=1 ADMIN_PASSWORD=TestAdmin123! JWT_SECRET=RealitySecret123 npx ts-node --transpile-only fixes/auth-service-reality-check.ts",
    "expected": "auth-reject-bad-password.outcome.success === false",
    "evidence": "evidence/auth-check.json",
    "status": "VERIFIED"
  },
  {
    "id": "F3",
    "feature": "JWTs are signed and tamper-evident",
    "command": "TS_NODE_PREFER_TS_EXTS=1 ADMIN_PASSWORD=TestAdmin123! JWT_SECRET=RealitySecret123 npx ts-node --transpile-only fixes/auth-service-reality-check.ts",
    "expected": "auth-signed-jwt.outcome.tamperedResult.error === 'Invalid token signature'",
    "evidence": "evidence/auth-check.json",
    "status": "VERIFIED"
  },
  {
    "id": "F4",
    "feature": "Credential store persists salted password hash",
    "command": "TS_NODE_PREFER_TS_EXTS=1 ADMIN_PASSWORD=TestAdmin123! JWT_SECRET=RealitySecret123 npx ts-node --transpile-only fixes/auth-service-reality-check.ts",
    "expected": "auth-stored-hash.outcome.passwordHash && auth-stored-hash.outcome.passwordSalt",
    "evidence": "evidence/auth-check.json",
    "status": "VERIFIED"
  },
  {
    "id": "F5",
    "feature": "Legacy user records without hashes migrate automatically",
    "command": "TS_NODE_PREFER_TS_EXTS=1 ADMIN_PASSWORD=TestAdmin123! JWT_SECRET=RealitySecret123 npx ts-node --transpile-only fixes/auth-service-reality-check.ts",
    "expected": "auth-legacy-migration.outcome.migratedLogin === true && !auth-legacy-migration.outcome.retainedPlaintext",
    "evidence": "evidence/auth-check.json",
    "status": "VERIFIED"
  },
  {
    "id": "F6",
    "feature": "TypeScript project builds without syntax errors",
    "command": "npm run build",
    "expected": "tsc exits 0",
    "evidence": "evidence/npm-build.log",
    "status": "VERIFIED"
  },
  {
    "id": "F7",
    "feature": "Pylint runs against Python services only",
    "command": "python3 -m pylint services/prompt_enhancer.py services/log-analyzer",
    "expected": "pylint exits 0 with score 10.00/10",
    "evidence": "evidence/pylint.log",
    "status": "VERIFIED"
  },
  {
    "id": "F8",
    "feature": "Documentation markdown files include YAML front matter",
    "command": "python - <<'PY' | tee evidence/docs-front-matter.txt\nfrom pathlib import Path\nroot = Path('docs')\npaths = sorted(root.glob('*.md'))\nfor path in paths:\n    text = path.read_text().splitlines()\n    status = text[0:1] == ['---'] and 'layout:' in text[1] and 'title:' in text[2]\n    print(f\"{path}: {'OK' if status else 'MISSING'}\")\nPY",
    "expected": "all docs/*.md lines report OK",
    "evidence": "evidence/docs-front-matter.txt",
    "status": "VERIFIED"
  }
]
