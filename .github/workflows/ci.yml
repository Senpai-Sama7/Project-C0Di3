name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Job 1: Lint and Type Check
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check TypeScript compilation
        run: npm run build
      
      - name: Check for type errors
        run: npx tsc --noEmit

  # Job 2: Build
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/*.js
            !node_modules/**
            !coverage/**
            !test/**
          retention-days: 7

  # Job 3: Test
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        env:
          MEMORY_ENCRYPTION_KEY: test-key-for-ci-minimum-32-characters-long-secure
        run: npm test -- --coverage --maxWorkers=2
      
      - name: Upload coverage to Codecov
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Upload coverage reports
        if: matrix.node-version == '20'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  # Job 4: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Check for known vulnerabilities
        run: |
          npm audit --json > audit-results.json || true
          cat audit-results.json
      
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit
          path: audit-results.json
          retention-days: 30

  # Job 5: Python Lint (for Python components)
  python-lint:
    name: Python Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          if [ -f requirements/pylint.txt ]; then
            pip install -r requirements/pylint.txt
          fi
      
      - name: Run Pylint
        run: |
          if [ -f services/prompt_enhancer.py ]; then
            python -m pylint services/prompt_enhancer.py || true
          fi
          if [ -d services/log-analyzer ]; then
            python -m pylint services/log-analyzer || true
          fi

  # Job 6: Deployment Validation
  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Validate deployment scripts
        run: |
          echo "Validating deployment scripts..."
          bash -n scripts/deploy-production.sh
          bash -n scripts/test-production.sh
          echo "Deployment scripts are valid"
      
      - name: Check required files
        run: |
          echo "Checking required deployment files..."
          test -f package.json
          test -f tsconfig.json
          test -f scripts/deploy-production.sh
          test -f docs/DEPLOYMENT_GUIDE.md
          echo "All required files present"

  # Job 7: Report Status
  report:
    name: Report Status
    runs-on: ubuntu-latest
    needs: [lint, build, test, security, python-lint]
    if: always()
    
    steps:
      - name: Check job statuses
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Python Lint: ${{ needs.python-lint.result }}"
      
      - name: Fail if any job failed
        if: |
          needs.lint.result == 'failure' ||
          needs.build.result == 'failure' ||
          needs.test.result == 'failure'
        run: exit 1
